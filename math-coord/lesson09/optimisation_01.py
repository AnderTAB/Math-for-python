# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–æ–ª–æ—á–∫—É OR-Tools –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
from ortools.linear_solver import pywraplp

# –°–æ–∑–¥–∞–µ–º —Ä–µ—à–∞—Ç–µ–ª—å —Å –ø–æ–º–æ—â—å—é –±—ç–∫–µ–Ω–¥–∞ GLOP
solver = pywraplp.Solver('Maximize army power', pywraplp.Solver.GLOP_LINEAR_PROGRAMMING)


swordsmen = solver.IntVar(0, solver.infinity(), 'swordsmen')
bowmen = solver.IntVar(0, solver.infinity(), 'bowmen')
horsemen = solver.IntVar(0, solver.infinity(), 'horsemen')

solver.Maximize(swordsmen*70 + bowmen*95 + horsemen*230)
solver.Add()
status = solver.Solve()


if status == pywraplp.Solver.OPTIMAL:
  print('================= Solution =================')
  print(f'Solved in {solver.wall_time():.2f} milliseconds in {solver.iterations()} iterations')
  print()
  print(f'Optimal power = {solver.Objective().Value()} üí™power')
  print('Army:')
  print(f' - üó°Ô∏èSwordsmen = {swordsmen.solution_value()}')
  print(f' - üèπBowmen = {bowmen.solution_value()}')
  print(f' - üêéHorsemen = {horsemen.solution_value()}')
else:
  print('The solver could not find an optimal solution.')